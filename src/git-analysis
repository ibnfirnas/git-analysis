#! /usr/bin/env Rscript
# vim: filetype=r:
#
# The MIT License (MIT)
#
# Copyright (c) 2013 Siraaj Khandkar
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

kDataDir <- ".git-analysis"


ParseTimestamps <- function(timestamps) {
  # Example timestamp: "Tue Nov 6 21:28:48 2012 -0500"
  #
  # Using relative timestamps literally instead of converting with as.POSIXct,
  # because commits could've been made from several timezones, in which case I
  # think it is more interesting to see the time as perceived by the committer
  # rather than a globally normalized time.
  components <- matrix(unlist(strsplit(timestamps, " +")), ncol=6, byrow=TRUE)
  days       <- components[, 1]
  times      <- components[, 4]
  times      <- matrix(unlist(strsplit(times, ":")), ncol=3, byrow=TRUE)
  hours      <- as.numeric(times[, 1])

  all.days  <- c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon")
  all.hours <- 0:23

  list( days  = factor(days , levels = all.days)
      , hours = factor(hours, levels = all.hours)
      )
}


DashesToZeros <- function(v) {
  ifelse(v == "-", 0, v)
}


CommitFlatten <- function(commit) {
  len <- length(commit)
  head <- commit[1]
  edits <- (
    if (len > 1) {
      edits <- commit[2:len]
      edits.indices.double.checked <- grep("^(\\d+|-)\t(\\d+|-)\t.+", edits)
      if (length(edits) == length(edits.indices.double.checked)) {
        edits
      } else {
        write("WARNING: some edit lines are in unexpected format.", stderr())
        edits[edits.indices.double.checked]
      }
    } else {
      vector()
    }
  )

  if (length(edits) > 0) {
    edits <- matrix(unlist(strsplit(edits, "\t")), ncol=3, byrow=TRUE)
    insertions <- as.numeric(DashesToZeros(edits[, 1]))
    deletions  <- as.numeric(DashesToZeros(edits[, 2]))
    total.insertions <- sum(insertions)
    total.deletions  <- sum(deletions)

    paste(c(head, total.insertions, total.deletions), collapse="|")
  } else {
    paste(c(head, 0, 0), collapse="|")
  }
}


ExtractCommits <- function(lines) {
  commit.start.indices <-
    grep("^[A-Z]{1}[a-z]{2} [A-Z]{1}[a-z]{2} \\d{1,2} \\d{2}:\\d{2}:\\d{2} \\d+ [+-]\\d{4}"
        , lines
        )
  commit.range.indices <- list()
  num.commits  <- length(commit.start.indices)
  num.lines <- length(lines)
  for (i in 1:num.commits) {
    range <- (
      if (i == num.commits) {
        commit.start.indices[i]:num.lines
      } else {
        commit.start.indices[i]:(commit.start.indices[i+1] - 1)
      }
    )
    commit.range.indices[[i]] <- range
  }
  lapply(commit.range.indices, function(indices) lines[indices])
}


ParseLog <- function(lines) {
  # Example log lines:
  #   Tue Nov 6 21:28:48 2012 -0500|Jeff Lebowski|550829ec241af50979f6a131dc864830681ac99d
  #   0\t3\tsrc/foo_bar.erl
  #   1\t4\tsrc/foo_baz.erl
  #   14\t15\tREADME.md
  #   Tue Nov 5 17:01:27 2012 -0700|Walter Sobchak|d140fd203486725c3eb377c43b7b5e9bb382d9cd
  #   -\t-\tbin/blob
  #   2\t4\tsrc/foo_year.erl
  #
  # Will be extracted as:
  #   Tue Nov 6 21:28:48 2012 -0500|Jeff Lebowski|550829ec241af50979f6a131dc864830681ac99d|1|7
  #   Tue Nov 5 17:01:27 2012 -0700|Walter Sobchak|d140fd203486725c3eb377c43b7b5e9bb382d9cd|2|4

  num.of.commit.fields <- 5

  commits <- unlist(lapply(ExtractCommits(lines), CommitFlatten))
  commit.fields <- strsplit(commits, "\\|")

  # Drop lines with missing data (most likely names)
  commit.comps.lengths <- lapply(commit.fields, length)
  commit.fields <- commit.fields[commit.comps.lengths == num.of.commit.fields]

  log.data <- matrix(unlist(commit.fields), ncol=num.of.commit.fields, byrow=T)

  column.timestamps <- log.data[, 1]
  column.name       <- log.data[, 2]
  column.hash       <- log.data[, 3]
  column.insertions <- log.data[, 4]
  column.deletions  <- log.data[, 5]

  time.components <- ParseTimestamps(column.timestamps)

  data.frame( Day        = time.components$days
            , Hour       = time.components$hours
            , Name       =            column.name
            , Hash       =            column.hash
            , Insertions = as.numeric(column.insertions)
            , Deletions  = as.numeric(column.deletions)
            )
}


GetTopCommitters <- function(data, n=4) {
  names(sort(table(data$Name), decreasing=TRUE))[1:n]
}


CountFrequencyOfCommits <- function(log) {
  # Leave-out edits and hash columns from frquency count
  punchcard.tbl <- as.data.frame(table(log[, 1:3]))

  # The following call to "apply" was 84% of the cost, accodrding to Rprof
  edits <- apply(punchcard.tbl, 1, LookupEdits, log)

  insertions <- edits[1, ]
  deletions  <- edits[2, ]

  punchcard.tbl$Diff  <- insertions - deletions
  punchcard.tbl$Edits <- insertions + deletions
  punchcard.tbl
}


PlotPunchcards <- function(data.all, data.top.n) {
  axis <- ggplot2::aes(y=Day, x=Hour)
  geom <-
    list( ggplot2::geom_point(ggplot2::aes(size=Freq))
        , ggplot2::scale_size(range=c(0, 10))
        )
  facets.names <- ggplot2::facet_wrap(~ Name, ncol=1)
  color.edits <- ggplot2::aes(color=Edits)
  color.diff <-
      list( ggplot2::aes(color=Diff)
          , ggplot2::scale_colour_gradient2( low=scales::muted("red")
                                           , high=scales::muted("green")
                                           )
          )

  plot.all   <- ggplot2::ggplot(data.all)   + axis + geom
  plot.top.n <- ggplot2::ggplot(data.top.n) + axis + geom + facets.names

  list( all                    = plot.all
      , all.edits              = plot.all   + color.edits
      , all.diff               = plot.all   + color.diff
      , top.n.committers       = plot.top.n
      , top.n.committers.edits = plot.top.n + color.edits
      , top.n.committers.diff  = plot.top.n + color.diff
      )
}


LookupEdits <- function(tbl.row, log.data) {
  log.data <- log.data[ log.data$Day  == tbl.row[1]
                      & log.data$Hour == tbl.row[2]
                      & log.data$Name == tbl.row[3]
                      ,
                      ]
  if (nrow(log.data) > 0) {
    c( sum(log.data$Insertions)
     , sum(log.data$Deletions)
     )
  } else {
    c(0, 0)
  }
}


FetchLog <- function() {
  command <- "git log --format='%ad|%an|%H' --numstat | grep -v '^$'"
  system(command, intern=TRUE)
}


StoreCSV <- function(lst) {
  write.csv( lst$data
           , file      = file.path(kDataDir, lst$filename)
           , row.names = FALSE
           )
}


StoreLog <- function(df) {
  StoreCSV(list(data=df, filename="log.csv"))
}


StorePunchcardTable <- function(df) {
  StoreCSV(list(data=df, filename="punchcard.csv"))
}


StorePunchcardPlots <- function(plots, n.committers) {
  filenames <- names(plots)
  filenames <- gsub("\\.", "-", filenames)
  filenames <- sub("-n-", sprintf("-%d-", n.committers), filenames)
  filenames <- paste("punchcard", filenames, sep="-")
  filenames <- paste(filenames  , "png"    , sep=".")
  len <- length(plots)
  if (len > 0) {
    for (i in 1:len) {
      ggplot2::ggsave( filename = file.path(kDataDir, filenames[i])
                     , plot     = plots[[i]]
                     , width    = 10
                     , height   = 5
                     )
    }
  }
}


OptParse <- function() {
  options <-
    list( optparse::make_option( c("-n", "--n_top_committers")
                               , type    = "integer"
                               , default = 4
                               )
        )
  optparse::parse_args(optparse::OptionParser(option_list=options))
}


DoInit <- function() {
  options(warn=1)
  Sys.setlocale(locale="C")
  dir.create(kDataDir, showWarnings=FALSE)
}


Main <- function() {
  DoInit()

  opt <- OptParse()

  log.data <- ParseLog(FetchLog())
  StoreLog(log.data)

  punchcard.tbl <- CountFrequencyOfCommits(log.data)
  StorePunchcardTable(punchcard.tbl)

  n <- opt$n_top_committers
  punchcard.tbl.top.n <-
    punchcard.tbl[punchcard.tbl$Name %in% GetTopCommitters(log.data, n), ]

  punchcard.plots <- PlotPunchcards(punchcard.tbl, punchcard.tbl.top.n)
  StorePunchcardPlots(punchcard.plots, n)
}


Main()
