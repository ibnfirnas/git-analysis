#! /usr/bin/env Rscript
# vim: filetype=r:
#
# The MIT License (MIT)
#
# Copyright (c) 2013 Siraaj Khandkar
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

kDataDir <- ".git-analysis"
kAllDays  <- c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon")
kAllHours <- 0:23


ParseTimestamp <- function(timestamp) {
  # Example timestamp: "Tue Nov 6 21:28:48 2012 -0500"
  #
  # Using relative timestamps literally instead of converting with as.POSIXct,
  # because commits could've been made from several timezones, in which case I
  # think it is more interesting to see the time as perceived by the committer
  # rather than a globally normalized time.
  components <- unlist(strsplit(timestamp, " +"))
  day        <- components[1]
  time       <- components[4]
  time       <- unlist(strsplit(time, ":"))
  hour       <- as.numeric(time[1])

  list( day  = factor(day , levels = kAllDays)
      , hour = factor(hour, levels = kAllHours)
      )
}


DashesToZeros <- function(v) {
  ifelse(v == "-", 0, v)
}


ParseCommit <- function(commit) {
  len <- length(commit)
  edits <- (
    if (len > 1) {
      edits <- commit[2:len]
      edits.indices.double.checked <- grep("^(\\d+|-)\t(\\d+|-)\t.+", edits)
      if (length(edits) == length(edits.indices.double.checked)) {
        edits
      } else {
        write("WARNING: some edit lines are in unexpected format.", stderr())
        edits[edits.indices.double.checked]
      }
    } else {
      vector()
    }
  )

  head <- unlist(strsplit(commit[1], "\\|"))

  timestamp <- head[1]
  timestamp <- ParseTimestamp(timestamp)
  name      <- head[2]
  hash      <- head[3]

  edits <- (
    if (length(edits) > 0)
      unlist(strsplit(edits, "\t"))
    else
      c(0, 0, "-")
  )
  edits <- matrix(edits, ncol=3, byrow=TRUE)

  list( hash           = hash
      , day            = timestamp$day
      , hour           = timestamp$hour
      , name           = name
      , num.files      = nrow(edits)
      , num.insertions = sum(as.numeric(DashesToZeros(edits[, 1])))
      , num.deletions  = sum(as.numeric(DashesToZeros(edits[, 2])))
      , edits          = edits
      )
}


ExtractCommits <- function(lines) {
  commit.start.indices <-
    grep("^[A-Z]{1}[a-z]{2} [A-Z]{1}[a-z]{2} \\d{1,2} \\d{2}:\\d{2}:\\d{2} \\d+ [+-]\\d{4}"
        , lines
        )
  commit.range.indices <- list()
  num.commits  <- length(commit.start.indices)
  num.lines <- length(lines)
  for (i in 1:num.commits) {
    range <- (
      if (i == num.commits) {
        commit.start.indices[i]:num.lines
      } else {
        commit.start.indices[i]:(commit.start.indices[i+1] - 1)
      }
    )
    commit.range.indices[[i]] <- range
  }
  lapply(commit.range.indices, function(indices) lines[indices])
}


ParseLog <- function(lines) {
  # Example log lines:
  #   Tue Nov 6 21:28:48 2012 -0500|Jeff Lebowski|550829ec241af50979f6a131dc864830681ac99d
  #   0\t3\tsrc/foo_bar.erl
  #   1\t4\tsrc/foo_baz.erl
  #   14\t15\tREADME.md
  #   Tue Nov 5 17:01:27 2012 -0700|Walter Sobchak|d140fd203486725c3eb377c43b7b5e9bb382d9cd
  #   -\t-\tbin/blob
  #   2\t4\tsrc/foo_year.erl

  lapply(ExtractCommits(lines), ParseCommit)
}


LookupEdits <- function(punchcard.row, commits.tbl) {
  commits.tbl <- commits.tbl[ commits.tbl$Day  == punchcard.row["Day"]
                            & commits.tbl$Hour == punchcard.row["Hour"]
                            & commits.tbl$Name == punchcard.row["Name"]
                            ,
                            ]
  if (nrow(commits.tbl) > 0) {
    c( sum(commits.tbl$TotalInsertions)
     , sum(commits.tbl$TotalDeletions)
     )
  } else {
    c(0, 0)
  }
}


PunchCard <- function(commits.tbl) {
  punchcard.tbl <- table(commits.tbl[, c("Day", "Hour", "Name")])
  punchcard.tbl <- as.data.frame(punchcard.tbl)

  # The following call to "apply" was 84% of the cost, accodrding to Rprof
  edits <- apply(punchcard.tbl, 1, LookupEdits, commits.tbl)

  insertions <- edits[1, ]
  deletions  <- edits[2, ]

  punchcard.tbl$Diff  <- insertions - deletions
  punchcard.tbl$Edits <- insertions + deletions
  punchcard.tbl
}


PlotDistributions <- function(commits.tbl, bin) {
  edit.types <- c("Insertion", "Deletion")
  insertions <- data.frame( Name     = commits.tbl$Name
                          , EditSize = commits.tbl$TotalInsertions
                          , EditType = factor("Insertion", levels=edit.types)
                          )
  deletions <- data.frame( Name     = commits.tbl$Name
                         , EditSize = commits.tbl$TotalDeletions
                         , EditType = factor("Deletion", levels=edit.types)
                         )
  color.assignmnets <-
    c( "Insertion" = scales::muted("green")
     , "Deletion"  = scales::muted("red")
     )
  distribution.edits.per.commit <-
    ( ggplot2::ggplot(rbind(deletions, insertions))
    + ggplot2::aes(x=EditSize, color=EditType, fill=EditType)
    + ggplot2::facet_wrap(~ Name, ncol=2, scales="free")
    + ggplot2::scale_fill_manual(values=color.assignmnets)
    + ggplot2::scale_colour_manual(values=color.assignmnets)
    )
  distribution.edits.per.commit.hist <-
    ( distribution.edits.per.commit
    + ggplot2::geom_histogram(binwidth=bin, alpha=0.4)
    )
  distribution.edits.per.commit.kde <-
    ( distribution.edits.per.commit
    + ggplot2::geom_density(binwidth=bin, alpha=0.4)
    )

  list( edits.per.commit.hist = distribution.edits.per.commit.hist
      , edits.per.commit.kde  = distribution.edits.per.commit.kde
      )
}


PlotPunchcards <- function(punchcard.tbl, punchcard.tbl.top.n) {
  axis <- ggplot2::aes(y=Day, x=Hour)
  geom <-
    list( ggplot2::geom_point(ggplot2::aes(size=Freq))
        , ggplot2::scale_size(range=c(0, 10))
        )
  facets.names <- ggplot2::facet_wrap(~ Name, ncol=1)
  color.edits <- ggplot2::aes(color=Edits)
  color.diff <-
      list( ggplot2::aes(color=Diff)
          , ggplot2::scale_colour_gradient2( low=scales::muted("red")
                                           , high=scales::muted("green")
                                           )
          )

  plot.all   <- ggplot2::ggplot(punchcard.tbl)
  plot.top.n <- ggplot2::ggplot(punchcard.tbl.top.n)

  plot.all   <- plot.all   + axis + geom
  plot.top.n <- plot.top.n + axis + geom + facets.names

  list( all                    = plot.all
      , all.edits              = plot.all   + color.edits
      , all.diff               = plot.all   + color.diff
      , top.n.committers       = plot.top.n
      , top.n.committers.edits = plot.top.n + color.edits
      , top.n.committers.diff  = plot.top.n + color.diff
      )
}


FetchLog <- function() {
  command <- "git log --format='%ad|%an|%H' --numstat | grep -v '^$'"
  system(command, intern=TRUE)
}


FilePath <- function(type, name, format) {
  data.file.type   <- type
  data.file.name   <- name
  data.file.format <- format
  filename <- paste(data.file.type, data.file.name, sep="-")
  filename <- paste(filename, data.file.format, sep=".")
  file.path(kDataDir, filename)
}


StoreRaw <- function(lines, name) {
  writeLines(lines, FilePath(type="raw", name=name, format="dat"))
}


StoreTable <- function(data, name) {
  write.csv( data
           , file      = FilePath(type="table", name=name, format="csv")
           , row.names = FALSE
           )
}


StoreTableCommits <- function(df) {
  StoreTable(data=df, name="commits")
}


StoreTablePunchcard <- function(df) {
  StoreTable(data=df, name="punchcard")
}


StorePlot <- function(plot, name) {
  ggplot2::ggsave( filename = FilePath(type="plot", name=name, format="png")
                 , plot     = plot
                 , width    = 10
                 , height   = 5
                 )
}


StorePlotsDistributions <- function(plots) {
  plot.names <- names(plots)
  plot.names <- gsub("\\.", "-", plot.names)
  plot.names <- paste("distribution", plot.names, sep="-")
  len <- length(plots)
  if (len > 0) {
    for (i in 1:len) {
      StorePlot(plots[[i]], plot.names[i])
    }
  }
}


StorePlotsPunchcard <- function(plots, n.committers) {
  plot.names <- names(plots)
  plot.names <- gsub("\\.", "-", plot.names)
  plot.names <- sub("-n-", sprintf("-%d-", n.committers), plot.names)
  plot.names <- paste("punchcard", plot.names, sep="-")
  len <- length(plots)
  if (len > 0) {
    for (i in 1:len) {
      StorePlot(plots[[i]], plot.names[i])
    }
  }
}


OptParse <- function() {
  options <-
    list( optparse::make_option( c("-n", "--n_top_committers")
                               , type    = "integer"
                               , default = 4
                               )
        , optparse::make_option( c("-b", "--bin_width")
                               , type    = "integer"
                               , default = 50
                               )
        )
  optparse::parse_args(optparse::OptionParser(option_list=options))
}


DoInit <- function() {
  options(warn=1)
  Sys.setlocale(locale="C")
  dir.create(kDataDir, showWarnings=FALSE)
}


ConstructTableOfCommits <- function(commits.log) {
  commits <- commits.log
  data.frame( Hash            = sapply(commits, function(c) c$hash )
            , Day             = sapply(commits, function(c) c$day )
            , Hour            = sapply(commits, function(c) c$hour )
            , Name            = sapply(commits, function(c) c$name )
            , TotalFiles      = sapply(commits, function(c) c$num.files )
            , TotalInsertions = sapply(commits, function(c) c$num.insertions )
            , TotalDeletions  = sapply(commits, function(c) c$num.deletions )
            )
}


GetTopCommitters <- function(commits.tbl, n=4) {
  names(sort(table(commits.tbl$Name), decreasing=TRUE))[1:n]
}


Main <- function() {
  DoInit()
  opt <- OptParse()

  log.lines <- FetchLog()
  StoreRaw(log.lines, "log")

  commits.log <- ParseLog(log.lines)

  commits.tbl <- ConstructTableOfCommits(commits.log)
  StoreTableCommits(commits.tbl)

  top.n.commiters <- GetTopCommitters(commits.tbl, opt$n_top_committers)

  punchcard.tbl       <- PunchCard(commits.tbl)
  punchcard.tbl.top.n <- punchcard.tbl[punchcard.tbl$Name %in% top.n.commiters, ]
  StoreTablePunchcard(punchcard.tbl)

  punchcard.plots <- PlotPunchcards(punchcard.tbl, punchcard.tbl.top.n)
  StorePlotsPunchcard(punchcard.plots, opt$n_top_committers)

  commits.tbl.top.n <- commits.tbl[commits.tbl$Name %in% top.n.commiters, ]
  plots.distributions <- PlotDistributions(commits.tbl.top.n, bin=opt$bin)
  StorePlotsDistributions(plots.distributions)
}


Main()
