#! /usr/bin/env Rscript
# vim: filetype=r:
#
# The MIT License (MIT)
#
# Copyright (c) 2013 Siraaj Khandkar
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

kDataDir <- ".git-analysis"


ParseTimestamps <- function(timestamps) {
  # Example timestamp: "Tue Nov 6 21:28:48 2012 -0500"
  #
  # Using relative timestamps literally instead of converting with as.POSIXct,
  # because commits could've been made from several timezones, in which case I
  # think it is more interesting to see the time as perceived by the committer
  # rather than a globally normalized time.
  components <- matrix(unlist(strsplit(timestamps, " +")), ncol=6, byrow=TRUE)
  days       <- components[, 1]
  times      <- components[, 4]
  hours      <- matrix(unlist(strsplit(times, ":")), ncol=3, byrow=TRUE)[, 1]
  list( days  = days
      , hours = as.numeric(hours)
      )
}


DashesToZeros <- function(v) {
  ifelse(v == "-", 0, v)
}


MsgFlatten <- function(msg) {
  len <- length(msg)
  head <- msg[1]
  edits <- (
    if (len > 1) {
      edits <- msg[2:len]
      edits.indices.double.checked <- grep("^(\\d+|-)\t(\\d+|-)\t.+", edits)
      if (length(edits) == length(edits.indices.double.checked)) {
        edits
      } else {
        write("WARNING: some edit lines are in unexpected format.", stderr())
        edits[edits.indices.double.checked]
      }
    } else {
      vector()
    }
  )

  if (length(edits) > 0) {
    edits <- matrix(unlist(strsplit(edits, "\t")), ncol=3, byrow=TRUE)
    insertions <- as.numeric(DashesToZeros(edits[, 1]))
    deletions  <- as.numeric(DashesToZeros(edits[, 2]))
    total.insertions <- sum(insertions)
    total.deletions  <- sum(deletions)

    paste(c(head, total.insertions, total.deletions), collapse="|")
  } else {
    paste(c(head, 0, 0), collapse="|")
  }
}


ExtractMsgs <- function(lines) {
  msg.start.indices <-
    grep("^[A-Z]{1}[a-z]{2} [A-Z]{1}[a-z]{2} \\d{1,2} \\d{2}:\\d{2}:\\d{2} \\d+ [+-]\\d{4}"
        , lines
        )
  msg.range.indices <- list()
  num.msgs  <- length(msg.start.indices)
  num.lines <- length(lines)
  for (i in 1:num.msgs) {
    range <- (
      if (i == num.msgs) {
        msg.start.indices[i]:num.lines
      } else {
        msg.start.indices[i]:(msg.start.indices[i+1] - 1)
      }
    )
    msg.range.indices[[i]] <- range
  }
  msgs <- lapply(msg.range.indices, function(indices) lines[indices])
  msgs <- lapply(msgs, MsgFlatten)
  unlist(msgs)
}


ParseLog <- function(lines) {
  # Example log lines:
  #   Tue Nov 6 21:28:48 2012 -0500|Jeff Lebowski|550829ec241af50979f6a131dc864830681ac99d
  #   0\t3\tsrc/foo_bar.erl
  #   1\t4\tsrc/foo_baz.erl
  #   14\t15\tREADME.md
  #   Tue Nov 5 17:01:27 2012 -0700|Walter Sobchak|d140fd203486725c3eb377c43b7b5e9bb382d9cd
  #   -\t-\tbin/blob
  #   2\t4\tsrc/foo_year.erl
  #
  # Will be extracted as:
  #   Tue Nov 6 21:28:48 2012 -0500|Jeff Lebowski|550829ec241af50979f6a131dc864830681ac99d|1|7
  #   Tue Nov 5 17:01:27 2012 -0700|Walter Sobchak|d140fd203486725c3eb377c43b7b5e9bb382d9cd|2|4

  number.of.msg.fields <- 5

  msgs       <- ExtractMsgs(lines)
  msg.fields <- strsplit(msgs, "\\|")

  # Drop lines with missing data (most likely names)
  msg.comps.lengths <- lapply(msg.fields, length)
  msg.fields <- msg.fields[msg.comps.lengths == number.of.msg.fields]

  log.data  <- matrix(unlist(msg.fields), ncol=number.of.msg.fields, byrow=T)
  log.times <- ParseTimestamps(log.data[, 1])

  all.days  <- c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon")
  all.hours <- 0:23

  data.frame( Day  = factor(log.times$days , levels=all.days)
            , Hour = factor(log.times$hours, levels=all.hours)
            , Name = factor(log.data[, 2])
            , Hash = log.data[, 3]
            , Insertions = as.numeric(log.data[, 4])
            , Deletions  = as.numeric(log.data[, 5])
            )
}


GetTopCommitters <- function(data, n=4) {
  names(sort(table(data$Name), decreasing=TRUE))[1:n]
}


PlotPunchcard <- function( data
                         , is.by.name    = FALSE
                         , is.show.diff  = FALSE
                         , is.show.edits = FALSE
                         ) {
  punchcard.plot <-
    ( ggplot2::ggplot(data, ggplot2::aes(y=Day, x=Hour))
    + ggplot2::geom_point(ggplot2::aes(size=Freq))
    + ggplot2::scale_size(range=c(0, 10))
    )

  punchcard.plot <-
    if (is.by.name) {
      ( punchcard.plot
      + ggplot2::facet_wrap(~ Name, ncol=1)
      )
    } else {
      punchcard.plot
    }

  punchcard.plot <-
    if (is.show.diff & !is.show.edits) {
      ( punchcard.plot
      + ggplot2::aes(color=Diff)
      + ggplot2::scale_colour_gradient2( low=scales::muted("red")
                                       , high=scales::muted("green")
                                       )
      )
    } else if (!is.show.diff & is.show.edits) {
      ( punchcard.plot
      + ggplot2::aes(color=Edits)
      )
    } else {
      punchcard.plot
    }

  punchcard.plot
}


LookupEdits <- function(tbl.row, log.data) {
  log.data <- log.data[ log.data$Day  == tbl.row[1]
                      & log.data$Hour == tbl.row[2]
                      & log.data$Name == tbl.row[3]
                      ,
                      ]
  if (nrow(log.data) > 0) {
    c( sum(log.data$Insertions)
     , sum(log.data$Deletions)
     )
  } else {
    c(0, 0)
  }
}


FetchLog <- function() {
  command <- "git log --format='%ad|%an|%H' --numstat | grep -v '^$'"
  system(command, intern=TRUE)
}


StoreCSV <- function(lst) {
  write.csv( lst$data
           , file      = file.path(kDataDir, lst$filename)
           , row.names = FALSE
           )
}


StoreLog <- function(df) {
  StoreCSV(list(data=df, filename="log.csv"))
}


StorePunchcardTable <- function(df) {
  StoreCSV(list(data=df, filename="punchcard.csv"))
}


StorePunchcardPlot <- function(p) {
  ggplot2::ggsave( filename = file.path(kDataDir, "punchcard.png")
                 , plot     = p
                 , width    = 10
                 , height   = 5
                 )
}


OptParse <- function() {
  options <-
    list( optparse::make_option( c("-n", "--n_top_committers")
                               , type    = "integer"
                               , default = 0
                               )
        , optparse::make_option( c("-d", "--show_diff")
                               , type    = "logical"
                               , action  = "store_true"
                               , default = FALSE
                               )
        , optparse::make_option( c("-e", "--show_edits")
                               , type    = "logical"
                               , action  = "store_true"
                               , default = FALSE
                               )
        )
  optparse::parse_args(optparse::OptionParser(option_list=options))
}


DoInit <- function() {
  options(warn=1)
  Sys.setlocale(locale="C")
  dir.create(kDataDir, showWarnings=FALSE)
}


Main <- function() {
  DoInit()

  opt <- OptParse()

  log.data <- ParseLog(FetchLog())
  StoreLog(log.data)

  punchcard.tbl <- {
    # Leave-out edits and hash columns from frquency count
    punchcard.tbl <- as.data.frame(table(log.data[, 1:3]))
    # Re-inserting the edit data is very expensive, so we're better off
    # avoiding it unless explicitly asked to
    if (opt$show_diff | opt$show_edits) {
      # The following call to "apply" was 84% of the cost, accodrding to Rprof
      edits <- apply(punchcard.tbl, 1, LookupEdits, log.data)
      insertions <- edits[1, ]
      deletions  <- edits[2, ]
      punchcard.tbl$Diff  <- insertions - deletions
      punchcard.tbl$Edits <- insertions + deletions
      punchcard.tbl
    } else {
      punchcard.tbl
    }
  }
  StorePunchcardTable(punchcard.tbl)

  punchcard.plot <- (
    if (opt$n_top_committers > 0) {
      top.committers <- GetTopCommitters(log.data, opt$n_top_committers)
      punchcard.tbl <- punchcard.tbl[punchcard.tbl$Name %in% top.committers, ]
      PlotPunchcard( punchcard.tbl
                   , is.by.name    = TRUE
                   , is.show.diff  = opt$show_diff
                   , is.show.edits = opt$show_edits
                   )
    } else {
      PlotPunchcard( punchcard.tbl
                   , is.show.diff  = opt$show_diff
                   , is.show.edits = opt$show_edits
                   )
    }
  )
  StorePunchcardPlot(punchcard.plot)
}


Main()
